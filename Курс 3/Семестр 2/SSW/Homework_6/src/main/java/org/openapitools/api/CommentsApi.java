/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Comment;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-22T19:40:35.628994242Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
@Validated
@Tag(name = "comments", description = "the comments API")
public interface CommentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /comments : Получить список всех комментариев
     *
     * @return Список комментариев успешно получен (status code 200)
     *         or Комментарии не найдены (status code 404)
     */
    @Operation(
        operationId = "commentsGet",
        summary = "Получить список всех комментариев",
        responses = {
            @ApiResponse(responseCode = "200", description = "Список комментариев успешно получен", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Comment.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Комментарии не найдены")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/comments",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Comment>> commentsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2023-03-17T12:00:00Z\", \"id\" : 1, \"postId\" : 16, \"authorId\" : 15, \"content\" : \"Это пример комментария.\" }, { \"createdAt\" : \"2023-03-17T12:00:00Z\", \"id\" : 1, \"postId\" : 16, \"authorId\" : 15, \"content\" : \"Это пример комментария.\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /comments/{id} : Удалить комментарий
     *
     * @param id  (required)
     * @return Комментарий успешно удалён (status code 204)
     *         or Bad request (status code 400)
     *         or Комментарий не найден (status code 404)
     */
    @Operation(
        operationId = "commentsIdDelete",
        summary = "Удалить комментарий",
        responses = {
            @ApiResponse(responseCode = "204", description = "Комментарий успешно удалён"),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "404", description = "Комментарий не найден")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/comments/{id}"
    )
    
    default ResponseEntity<Void> commentsIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /comments/{id} : Получить комментарий по идентификатору
     *
     * @param id  (required)
     * @return Комментарий успешно получен (status code 200)
     *         or Комментарий не найден (status code 404)
     */
    @Operation(
        operationId = "commentsIdGet",
        summary = "Получить комментарий по идентификатору",
        responses = {
            @ApiResponse(responseCode = "200", description = "Комментарий успешно получен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            }),
            @ApiResponse(responseCode = "404", description = "Комментарий не найден")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/comments/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Comment> commentsIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2023-03-17T12:00:00Z\", \"id\" : 1, \"postId\" : 16, \"authorId\" : 15, \"content\" : \"Это пример комментария.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /comments/{id} : Обновить существующий комментарий
     *
     * @param id  (required)
     * @param comment Обновлённый объект комментария (required)
     * @return Комментарий успешно обновлён (status code 200)
     *         or Bad request (status code 400)
     *         or Комментарий не найден (status code 404)
     */
    @Operation(
        operationId = "commentsIdPut",
        summary = "Обновить существующий комментарий",
        responses = {
            @ApiResponse(responseCode = "200", description = "Комментарий успешно обновлён", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "404", description = "Комментарий не найден")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/comments/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Comment> commentsIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Comment", description = "Обновлённый объект комментария", required = true) @Valid @RequestBody Comment comment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2023-03-17T12:00:00Z\", \"id\" : 1, \"postId\" : 16, \"authorId\" : 15, \"content\" : \"Это пример комментария.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /comments : Создать новый комментарий
     *
     * @param comment Объект комментария для создания (required)
     * @return Комментарий успешно создан (status code 201)
     *         or Bad request (status code 400)
     *         or Такой комментарий уже существует (status code 404)
     */
    @Operation(
        operationId = "commentsPost",
        summary = "Создать новый комментарий",
        responses = {
            @ApiResponse(responseCode = "201", description = "Комментарий успешно создан", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "404", description = "Такой комментарий уже существует")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/comments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Comment> commentsPost(
        @Parameter(name = "Comment", description = "Объект комментария для создания", required = true) @Valid @RequestBody Comment comment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2023-03-17T12:00:00Z\", \"id\" : 1, \"postId\" : 16, \"authorId\" : 15, \"content\" : \"Это пример комментария.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
